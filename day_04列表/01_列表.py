# 为什么有容器：100个数据、100个变量不太现实。

# 一、基本性质（将列表看做队伍）
# 1. 列表是容器型数据类型。
# 2. 列表是有序的（容器中的元素有固定位置）。
# 3. 列表是可变的。
# 4. 列表使用 [] 作为容器符号，英文为：list
# 5. 列表在Python中叫列表，但是其他编程语言被叫做数组。


# 二、创建一个列表
list_1 = [1, 2, 3, 4, 5]

# 三、下标（索引）
# 1. 列表中每个元素有自己的固定位置，分为正向索引和负向索引：
# 正向索引，从0开始向右递增
# 负向索引，从-1开始向左递减

# 2. 通过下标获取元素，语法：有序容器[下标]
stu = ['李华', '小明', '小芳', '张三', '李四']
print(stu[3], stu[-2])

# 三、切片
# 切片是对下标的深化
# 语法： 有序容器[start: end: step]
# start:起点， end：终点， step：步长（跨度）
# 1. start与end组成了 [start, end)的区间。
# 2. 切片中start、end、step能够从原容器中切出下标有规律的元素。
# 3. step可以不写，默认为1；start、end也可以不写，表示“从头到尾”。
# 4. 下一次获取的元素的下标 = 本次获取的元素的下标 + step。
# 5. step必须为整数，如果step >= 1， start 对应的元素必须在end的左边；
# 反之，step <= -1， start对应的元素必须在end的右边。
# 备注：如果从左向右切元素，step >= 1; 反之，step <= -1

movies = ['消失的她', '封神', '隐秘的角落', '肖申克的救赎', '霸王别姬', '流浪地球']
# 获取: ['消失的她', '隐秘的角落']
print(movies[0: 3: 2])
# 获取：[封神， 霸王别姬]
print(movies[1: 5: 3])
print(movies[1: -1: 3])

# 获取： [封神， 肖申克的救赎， 流浪地球]
print(movies[1::2])

# 获取：肖申克的救赎
print(movies[3])

# 获取：[隐秘的角落, 肖申克的救赎]
print(movies[2:4], movies[2:4:], movies[2:4:1])

# 获取：[流浪地球， 霸王别姬]
print(movies[-1: -3: -1], movies[5:3:-1])

# 将列表完整的倒序输出一遍
print(movies[::-1])

# 四、点名系统的实现
stu = ['张三', '李四', '王二麻子', '点不到我']
print(len(stu))
# 容器中最后一个元素的下标 + 1 等于容器长度
import random

stu_index = random.randint(0, len(stu) - 1)
print(f'幸运儿为：{stu[stu_index]}')


# 五、练习：已知一个数字列表，求所有元素和。
list_2 = [50, 80, 60, 90, 20, 20]
total=0
for i in list_2:
    total+=i
print(total)
